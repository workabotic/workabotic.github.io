.section .data
array: .word 5, 3, 8, 6, 2
array_len: .word 5
msg: .asciz "Sorted array: "
newline: .asciz "\n"

.balign 4
.section .bss
sorted_array: .space 20

.section .text
.global _start

_start:
    // Load array length into r0
    ldr r0, =array_len
    ldr r0, [r0]

    // Set up pointers to array
    ldr r1, =array
    ldr r2, =sorted_array
    bl bubble_sort

    // Print result message
    ldr r0, =msg
    bl print_string

    // Print sorted array
    ldr r0, =sorted_array
    ldr r1, =array_len
    ldr r1, [r1]
    bl print_array

    // Print newline
    ldr r0, =newline
    bl print_string

    // Exit program
    mov r0, #0
    mov r7, #1
    svc 0

// Function to print a string
print_string:
    mov r1, r0
    mov r2, #0
print_loop:
    ldrb r3, [r1, r2]
    cmp r3, #0
    beq print_done
    add r2, r2, #1
    b print_loop
print_done:
    mov r2, r2
    mov r7, #4
    mov r1, r0
    mov r0, #1
    svc 0
    bx lr

// Function to print an array
print_array:
    mov r3, r1
    mov r1, r0
    mov r2, #4
print_array_loop:
    ldr r0, [r1], #4
    bl print_int
    subs r3, r3, #1
    bne print_array_loop
    bx lr

// Function to print an integer
print_int:
    mov r2, #10
    mov r3, #0
itoa_loop:
    udiv r4, r0, r2
    mls r1, r4, r2, r0
    add r1, r1, #48
    strb r1, [sp, r3]
    add r3, r3, #1
    mov r0, r4
    cmp r0, #0
    bne itoa_loop
    mov r0, #1
    mov r7, #4
    mov r1, sp
    sub sp, sp, #12
    mov r2, r3
    svc 0
    add sp, sp, #12
    bx lr

// Bubble Sort function
bubble_sort:
    // r0 = length of array
    mov r4, r0
    sub r4, r4, #1
outer_loop:
    mov r5, r4
    mov r6, r1
inner_loop:
    ldr r3, [r6]
    ldr r7, [r6, #4]
    cmp r3, r7
    ble no_swap
    str r7, [r6]
    str r3, [r6, #4]
no_swap:
    add r6, r6, #4
    subs r5, r5, #1
    bne inner_loop
    subs r4, r4, #1
    cmp r4, #0
    bgt outer_loop
    bx lr
