/* ARM assembly Raspberry PI  */
/*  program jewels.s   */

/************************************/
/* Constantes                       */
/************************************/
/* for this file see task include a file in language ARM assembly*/
.include "../constantes.inc"

/************************************/
/* Initialized data                 */
/************************************/
.data
szMessResult:         .asciz "Result: "
szStone1:             .asciz "aAAbbbb" 
szJewels1:            .asciz "aA"
szStone2:             .asciz "ZZ" 
szJewels2:            .asciz "z"
szCarriageReturn:     .asciz "\n"
szMessStart:          .asciz "Program 32 bits start.\n"
/************************************/
/* UnInitialized data               */
/************************************/
.bss 
sZoneConv:            .skip 24
/************************************/
/*  code section                    */
/************************************/
.text
.global main   
main:                      @ entry of program
    ldr r0,iAdrszMessStart
    bl affichageMess

    ldr r0,iAdrszStone1
    ldr r1,iAdrszJewels1
    bl countJewels
    ldr r0,iAdrszStone2
    ldr r1,iAdrszJewels2
    bl countJewels

100:                       @ standard end of the program
    mov r0, #0             @ return code
    mov r7, #EXIT          @ request to exit program
    svc 0                  @ perform the system call
iAdrszStone1:             .int szStone1
iAdrszJewels1:            .int szJewels1
iAdrszStone2:             .int szStone2
iAdrszJewels2:            .int szJewels2
iAdrsZoneConv:            .int sZoneConv
iAdrszMessResult:         .int szMessResult
iAdrszCarriageReturn:     .int szCarriageReturn
iAdrszMessStart:          .int szMessStart
/***************************************************/
/*   count jewels in stone                   */
/***************************************************/
/* r0 contains stone address */
/* r1 contains jewels address */
/* r0 return jewels count */
countJewels:
    push {r1-r6,lr}      @ save registers
    mov r4,#0            @ counter
    mov r3,#0            @ index stone
1:
    ldrb r6,[r0,r3]      @ load byte of stone
    cmp r6,#0            @ end stone ?
    beq 3f
    mov r5,#0            @ index jewels
2:
    ldrb r2,[r1,r5]      @ load byte of jewels
    cmp r2,#0            @ end jewels ?
    addeq r3,r3,#1       @ yes -> increment index stone
    beq 1b               @ and loop
    cmp r6,r2            @ compare byte
    addne r5,r5,#1       @ not equal -> increment jewels index
    bne 2b               @ and loop
    add r4,r4,#1         @ else increment counter
    add r3,r3,#1         @ incremente index stone
    b 1b                 @ and loop

3:                       @ result display
    mov r0,r4
    ldr r1,iAdrsZoneConv
    bl conversion10
    ldr r0,iAdrszMessResult
    bl affichageMess
    ldr r0,iAdrsZoneConv
    bl affichageMess
    ldr r0,iAdrszCarriageReturn
    bl affichageMess
    
    mov r0,r4
 100:
    pop {r1-r6,pc}  
/***************************************************/
/*      ROUTINES INCLUDE                           */
/***************************************************/
/* for this file see task include a file in language ARM assembly*/
.include "../affichage.inc"